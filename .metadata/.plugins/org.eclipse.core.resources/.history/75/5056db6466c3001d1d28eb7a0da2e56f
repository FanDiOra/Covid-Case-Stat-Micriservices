package com.agrosofttechnologies.covidreports.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.agrosofttechnologies.covidreports.bean.ResponseError;
import com.agrosofttechnologies.covidreports.entities.CovidCase;
import com.agrosofttechnologies.covidreports.entities.CovidReport;
import com.agrosofttechnologies.covidreports.entities.Report;
import com.agrosofttechnologies.covidreports.repository.CovidReportRepository;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/fd-etu/agrosoft/covid/reports")
public class CovidReportController {

	@Autowired
	CovidReportRepository repository;
	
	@Autowired
	private ResponseError errorResponse;
	
	@GetMapping
	public ResponseEntity<Object> getReports (){
		try {
			List<CovidReport> covidReportsList = repository.findAll();
			  
			if (covidReportsList.isEmpty()) {
				  errorResponse.prepareNotFoundResponse("List is empty !");
				  return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
			}
			  return ResponseEntity.status(HttpStatus.OK).body(covidReportsList);
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		return null;
	}
	
	@GetMapping("state/{state}")
	public ResponseEntity<Object> getReportByState (@PathVariable("state") String state){
		try {
			CovidReport covidReport = repository.findByState(state);
			
			if (covidReport == null) {
				  errorResponse.prepareNotFoundResponse("State not exist !");
				  return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
			}
			  return ResponseEntity.status(HttpStatus.OK).body(covidReport);
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		return null;
	}
	
	@PostMapping
	public ResponseEntity<Object> createReport (@Valid @RequestBody CovidCase covidCase, 
			BindingResult result){
		
		try {
			if (result.hasErrors()) {
				String description = result.getAllErrors().get(0).getDefaultMessage();
				errorResponse.prepareBadRequestResponse(description);
				
				return ResponseEntity.badRequest().body(errorResponse);
			}
			
			CovidReport state = repository.findByState(covidCase.getState());
			
			if (state == null) {
				CovidReport covidReport = new CovidReport();
				
				covidReport.setState(covidCase.getState());
				
				Report report = new Report();
				
			}
			
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		
		return null;
		
	}
	
	private void setReport(Report report, String caseType) {
		
		if (caseType.equals("positive") || caseType.equals("negative")) {
			report.setTotal(report.getTotal() + 1);
		}
		if (caseType.equals("positive")) {
			report.setTotal(report.getPositive() + 1);
		}
		if (caseType.equals("recovered")) {
			report.setTotal(report.getRecovered() + 1);
		}
		if (caseType.equals("death")) {
			report.setTotal(report.getDeath() + 1);
		}
		if (caseType.equals("vaccinated")) {
			report.setTotal(report.getVaccinated() + 1);
		}
		}
	}
}
